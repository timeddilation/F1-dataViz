}
}
return(pp)
}
getTrackImage <- function(circuit_Id, transparencyVal){
# have a default image to return in case one is not found
returnImage <- watermark
if (circuit_Id %in% circuits[!is.na(imageSource), circuitId]){
img <- readPNG(source = circuits[circuitId == circuit_Id, imageSource])
img2 <- matrix(rgb(img[,,1],img[,,2],img[,,3], img[,,4] * transparencyVal), nrow=dim(img)[1])
returnImage <- rasterGrob(img2, interpolate = TRUE)
}
return(returnImage)
}
convertLapTimeStringToSeconds <- function(lapTimeString){
minutes <- as.numeric(stringr::str_extract(lapTimeString, "^[0-9]{1,2}"))
seconds <- stringr::str_extract(lapTimeString, ":[0-9]{1,2}\\.[0-9]{1,3}")
seconds <- as.double(gsub(":", "", seconds, fixed = TRUE))
totalSeconds <- (minutes * 60) + seconds
return(totalSeconds)
}
convertSecondsToDisplayTime <- function(secondsToConvert){
totalMinutes <- floor(secondsToConvert / 60)
remainingSeconds <- secondsToConvert - (totalMinutes * 60)
if (remainingSeconds < 10){
displayTime <- paste(totalMinutes, ":0", sprintf("%.3f", round(remainingSeconds,3)), sep = "")
} else {
displayTime <- paste(totalMinutes, ":", sprintf("%.3f", round(remainingSeconds,3)), sep = "")
}
return(displayTime)
}
loadF1Data <- function(){
circuits <<- fread("data/circuits.csv")
names(circuits) <<- c("circuitId","circuitRef","name","location","country","lat","lng","alt","url")
drivers <<- fread("data/driver.csv")
names(drivers) <<- c("driverId","driverRef","number","code","forename","surname","dob","nationality","url")
lapTimes <<- fread("data/lap_times.csv")
names(lapTimes) <<- c("raceId","driverId","lap","position","time","milliseconds")
races <<- fread("data/races.csv")
names(races) <<- c("raceId","year","round","circuitId","name","date","url")
results <<- fread("data/results.csv")
names(results) <<- c("resultId","raceId","driverId","constructorId","number","grid","position","positionText","positionOrder","points","laps","time","milliseconds","fastestLap","rank","fastestLapTime","fastestLapSpeed","statusId")
### milliseconds displayed as seconds makes lubridate functions easier
lapTimes[, seconds := milliseconds / 1000]
### create new table for fastest laps, because some of these are missing from core data
### note: this throws warning: "In eval(jsub, SDenv, parent.frame()) : NAs introduced by coercion"
### but it's fine, it's just a warning, intended behavior here.
racesWithTimes <- unique(lapTimes[, raceId])
raceSpeeds <- results[raceId %in% racesWithTimes][, fastestLapSpeed := as.numeric(fastestLapSpeed)]
raceSpeeds <- raceSpeeds[!is.na(fastestLapSpeed), .(highestSpeed = max(fastestLapSpeed)), by = raceId]
fastestLaps <<- lapTimes[, .(milliseconds = min(milliseconds)), by = raceId]
fastestLaps[, seconds := milliseconds / 1000]
for (i in 1:nrow(fastestLaps)) {
fastestLaps[i, displayTime := convertSecondsToDisplayTime(seconds)]
}
fastestLaps[, fastestLapSpeed := as.numeric()]
for (i in raceSpeeds[, raceId]) {
speedVal <- raceSpeeds[raceId == i, highestSpeed]
fastestLaps[raceId == i, fastestLapSpeed := speedVal]
}
fastestLaps[, fastestLapSpeed := sprintf("%.3f", round(fastestLapSpeed,3))]
fastestLaps[is.na(fastestLapSpeed), fastestLapSpeed := "No Data"]
### fix circuit names
circuits[circuitId == 18, name := "Autódromo José Carlos Pace"]
circuits[circuitId == 20, name := "Nürburgring"]
### attach circuit image source
if (!"imageSource" %in% names(circuits)){
circuits[, imageSource := character()]
}
circuits[circuitId == 1, imageSource := "images/Albert_Park.png"]
circuits[circuitId == 2, imageSource := "images/Sepang.png"]
circuits[circuitId == 3, imageSource := "images/Sakhir1.png"]
circuits[circuitId == 4, imageSource := "images/CircuitDeCatalunya.png"]
circuits[circuitId == 6, imageSource := "images/Monte_Carlo_Formula_1_track_map.png"]
circuits[circuitId == 7, imageSource := "images/CircuitGillesVilleneuve.png"]
circuits[circuitId == 8, imageSource := "images/Magny-Cours.png"]
circuits[circuitId == 9, imageSource := "images/SilverstoneArena2010.png"]
circuits[circuitId == 10, imageSource := "images/Hockenheimring2002.png"]
circuits[circuitId == 11, imageSource := "images/Hungaroring.png"]
circuits[circuitId == 13, imageSource := "images/Track_map_of_Spa-Francorchamps_in_Belgium.png"]
circuits[circuitId == 14, imageSource := "Monza2000.png"]
circuits[circuitId == 15, imageSource := "images/Singapore_street_circuit_v4.png"]
circuits[circuitId == 17, imageSource := "images/ShanghaiCircuit1.png"]
circuits[circuitId == 18, imageSource := "images/Interlagos1990.png"]
circuits[circuitId == 20, imageSource := "images/Nurburgring2002.png"]
circuits[circuitId == 21, imageSource := "Imola1995.png"]
circuits[circuitId == 22, imageSource := "SuzukaCircuit2005.png"]
circuits[circuitId == 24, imageSource := "Circuit_Yas-Island.png"]
}
loadF1Data()
### animate that shit ###
# set the circuit to evaluate
# raceCounts <- races[raceId %in% unique(lapTimes[, raceId]), .(races = .N), by = circuitId][order(races)]
# mostRacesCircuitId <- as.numeric(raceCounts[nrow(raceCounts), circuitId])
mostRacesCircuitId <- 18 # set the circuit ID to evaluate here!!!
# only pull races that have lapTimes data
racesWithTimes <- unique(lapTimes[, raceId])
racesForCircuit <- races[circuitId == mostRacesCircuitId][raceId %in% racesWithTimes][order(year)]
# pull all lap times for races, and create a "seconds" column for the lap time
allCircuitLapTimes <- lapTimes[raceId %in% racesForCircuit[, raceId]]
# limit lap times to those under 3 minutes, removes pit stop laps and exceedingly slow laps that might throw off intended resutls
anaimateLapTimesData <- allCircuitLapTimes[seconds <= 180]
anaimateLapTimesData <- merge(anaimateLapTimesData, races[, .(raceId, name, year)])
# retrieve race results for all races on circuit
racesResults <- unique(races[raceId %in% unique(anaimateLapTimesData[, raceId]), .(raceId, year)])
racesResults <- merge(racesResults, fastestLaps, by = "raceId")
racesResults <- merge(racesResults, anaimateLapTimesData[, .(medianLapTime = median(seconds)), by = raceId], by = "raceId")
racesResults[, raceToolTip := paste("<span style='font-size:16; color:black'>",
"**Fastest Lap:** ", displayTime,
"<br>**Fastest Lap Speed:** ", as.character(fastestLapSpeed),
"</span>",
sep = "")]
# boxplot stats for static reference lines
circuitBoxPlotStats <- boxplot.stats(anaimateLapTimesData[, seconds])
vlines <- data.table(metric = c("Q1", "Q2", "Median", "Q3", "Q4"),
value = circuitBoxPlotStats$stats[1:5],
metricColor = c("darkgreen", "blue", "brown2", "blue", "darkgreen"))
grandPrixName <- anaimateLapTimesData[1, name]
circuitImg <- getTrackImage(mostRacesCircuitId, 0.2)
rm(circuitBoxPlotStats, mostRacesCircuitId, racesForCircuit, racesWithTimes)
### define plot size
xMin <- 45
xMax <- 180
yMin <- 0
yMax <- 0.35
# density large plot
denAnim <- ggplot(anaimateLapTimesData, aes(x = seconds)) +
geom_density(data = allCircuitLapTimes[seconds <= 180], adjust = 4,
aes(x = seconds, color = "green", fill = "green", alpha = 0.5)) +
geom_density(aes(color = "purple", fill = "purple", alpha = 0.5),
adjust = 4) +
geom_vline(data = vlines, aes(xintercept = value, color = metricColor), linetype = "dashed") +
geom_text(data = vlines, aes(x = value + 0.5, y = 0.3, label = metric, color = metricColor),
angle = 270) +
xlim(xMin,xMax) +
ylim(yMin,yMax) +
labs(title = paste(grandPrixName, "{frame_time}"),
subtitle = "Lap Times Density Over Years") +
xlab("Lap Time (seconds)") +
ylab("Density") +
theme_wsj() +
# legend formatting
scale_fill_identity(name = "", guide = "legend",
labels = c(paste("All", grandPrixName), paste("This", grandPrixName))) +
scale_alpha_identity(element_blank()) +
scale_colour_identity(element_blank()) +
theme(legend.position = c(0.75,0.95), legend.direction = "horizontal",
axis.title=element_text(size=12)) +
# watermark, track image, and fastest lap/speed
annotation_custom(circuitImg, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
annotate(geom = "text", x = 165, y = 0.015, size = 5, label = "github.com/timeddilation") +
geom_rich_text(data = racesResults[, .(year, raceToolTip)], aes(x = 150, y = 0.3, label = raceToolTip),
fill = NA, label.color = NA, hjust = 0) +
# gganimmate stuff
transition_time(year) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
# animate(denAnim, width = 960, height = 540)
# field spread (boxplot)
spreadAnim <- ggplot(anaimateLapTimesData[seconds <= 180]) +
geom_tufteboxplot(aes(y = seconds, size = 5), show.legend = FALSE,
median.type = "line", hoffset = 0, voffset = 0, width = 3, whisker.type = "point") +
ylim(xMin,xMax) +
theme_wsj() +
labs(title = "Lap Times Spread") +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_blank(),
plot.title = element_text(size = 12)) +
coord_flip() +
transition_time(year) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
# animate(spreadAnim, height = 100, width = 480)
# median lap time (line)
medianAnim <- ggplot(racesResults, aes(x = year, y = medianLapTime)) +
geom_line() +
geom_point(aes(group = seq_along(year))) +
labs(title = "Median Lap Times") +
ylab("Lap Time (seconds)") +
theme_wsj() +
theme(plot.title = element_text(size = 12),
axis.title.x = element_blank()) +
transition_reveal(year) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
# animate(medianAnim, height = 100, width = 480)
# setup some params to generate the final gif
gps <- length(unique(anaimateLapTimesData[, raceId]))
framesPerGp <- 16
totalFrames <- (gps * framesPerGp) + 15
denAnimGif <- animate(denAnim, start_pause = 5, end_pause = 10, nframes = totalFrames,
detail = 4, width = 960, height = 540)
spreadAnimGif <- animate(spreadAnim, start_pause = 5, end_pause = 10, nframes = totalFrames,
detail = 4, width = 480, height = 100)
medianAnimGif <- animate(medianAnim, start_pause = 5, end_pause = 10, nframes = totalFrames,
detail = 4, width = 480, height = 100)
# denAnimGif
rm(gps, framesPerGp, allCircuitLapTimes, anaimateLapTimesData, vlines, grandPrixName,
racesResults, totalFrames, denAnim, circuitImg, xMin, xMax, yMin, yMax)
rm(denAnim, spreadAnim, medianAnim)
spread.gif <- image_read(spreadAnimGif)
median.gif <- image_read(medianAnimGif)
spreadMedian.gif <- image_append(c(spread.gif[1], median.gif[1]))
pb <- txtProgressBar(min = 0, max = totalFrames, style = 3)
for (i in 2:totalFrames) {
combined <- image_append(c(spread.gif[i], median.gif[i]))
spreadMedian.gif <- c(spreadMedian.gif, combined)
setTxtProgressBar(pb, i)
}
close(pb)
rm(combined, pb)
mostRacesCircuitId <- 18 # set the circuit ID to evaluate here!!!
# only pull races that have lapTimes data
racesWithTimes <- unique(lapTimes[, raceId])
racesForCircuit <- races[circuitId == mostRacesCircuitId][raceId %in% racesWithTimes][order(year)]
# pull all lap times for races, and create a "seconds" column for the lap time
allCircuitLapTimes <- lapTimes[raceId %in% racesForCircuit[, raceId]]
# limit lap times to those under 3 minutes, removes pit stop laps and exceedingly slow laps that might throw off intended resutls
anaimateLapTimesData <- allCircuitLapTimes[seconds <= 180]
anaimateLapTimesData <- merge(anaimateLapTimesData, races[, .(raceId, name, year)])
# retrieve race results for all races on circuit
racesResults <- unique(races[raceId %in% unique(anaimateLapTimesData[, raceId]), .(raceId, year)])
racesResults <- merge(racesResults, fastestLaps, by = "raceId")
racesResults <- merge(racesResults, anaimateLapTimesData[, .(medianLapTime = median(seconds)), by = raceId], by = "raceId")
racesResults[, raceToolTip := paste("<span style='font-size:16; color:black'>",
"**Fastest Lap:** ", displayTime,
"<br>**Fastest Lap Speed:** ", as.character(fastestLapSpeed),
"</span>",
sep = "")]
# boxplot stats for static reference lines
circuitBoxPlotStats <- boxplot.stats(anaimateLapTimesData[, seconds])
vlines <- data.table(metric = c("Q1", "Q2", "Median", "Q3", "Q4"),
value = circuitBoxPlotStats$stats[1:5],
metricColor = c("darkgreen", "blue", "brown2", "blue", "darkgreen"))
grandPrixName <- anaimateLapTimesData[1, name]
circuitImg <- getTrackImage(mostRacesCircuitId, 0.2)
rm(circuitBoxPlotStats, mostRacesCircuitId, racesForCircuit, racesWithTimes)
### define plot size
xMin <- 45
xMax <- 180
yMin <- 0
yMax <- 0.35
gps <- length(unique(anaimateLapTimesData[, raceId]))
framesPerGp <- 16
totalFrames <- (gps * framesPerGp) + 15
rm(gps, framesPerGp, allCircuitLapTimes, anaimateLapTimesData, vlines, grandPrixName,
racesResults, circuitImg, xMin, xMax, yMin, yMax)
rm(denAnim, spreadAnim, medianAnim)
spreadMedian.gif <- image_append(c(spread.gif[1], median.gif[1]))
pb <- txtProgressBar(min = 0, max = totalFrames, style = 3)
for (i in 2:totalFrames) {
combined <- image_append(c(spread.gif[i], median.gif[i]))
spreadMedian.gif <- c(spreadMedian.gif, combined)
setTxtProgressBar(pb, i)
}
close(pb)
rm(combined, pb)
getwd()
image_write(spreadMedian.gif, "test.gif")
den.gif <- image_read(denAnimGif)
combo.gif <- image_append(c(den.gif[1], spreadMedian.gif[1], stack = TRUE))
pb <- txtProgressBar(min = 0, max = totalFrames, style = 3)
for (i in 2:totalFrames) {
combined <- image_append(c(den.gif[i], spreadMedian.gif[i], stack = TRUE))
combo.gif <- c(combo.gif, combined)
setTxtProgressBar(pb, i)
}
rm(combined, pb)
combo.gif <- image_append(c(den.gif[1], spreadMedian.gif[1], stack = TRUE))
combo.gif <- image_append(c(den.gif[1], spreadMedian.gif[1]))
combo.gif <- image_append(c(den.gif[1], spreadMedian.gif[1], stack = TRUE))
?image_append
combo.gif <- image_append(c(den.gif[1], spreadMedian.gif[1]), stack = TRUE)
pb <- txtProgressBar(min = 0, max = totalFrames, style = 3)
for (i in 2:totalFrames) {
combined <- image_append(c(den.gif[i], spreadMedian.gif[i]), stack = TRUE)
combo.gif <- c(combo.gif, combined)
setTxtProgressBar(pb, i)
}
rm(combined, pb)
image_write(combo.gif, "test2.gif")
?data.table
library(data.table)
library(ggplot2)
library(ggtext)
library(ggthemes)
library(gganimate)
library(magick)
library(plotly)
library(lubridate)
library(dplyr)
library(png)
library(grid)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
watermrk <- readPNG(source = "images/watermark.png")
watermark <- rasterGrob(watermrk, interpolate = TRUE)
rm(watermrk)
generateRaceDriverLaps <- function(raceIdEval) {
raceLaps <- merge(lapTimes[raceId == raceIdEval], drivers[, .(driverId, surname)])
raceLaps[, seconds := milliseconds / 1000]
raceLaps[, totalRaceTime := cumsum(milliseconds), by = driverId]
return(raceLaps)
}
raceLapsBoxPlotsMinMax <- function(race_Id) {
# returns min and max laps times across all laps' boxplot.stats[1,5]
driverLapsNormWhiskers <- lapTimes[raceId == race_Id, .(min = boxplot.stats(milliseconds)$stats[1],
max = boxplot.stats(milliseconds)$stats[5]),
by = lap]
minTime <- min(driverLapsNormWhiskers[, min])
#maxTime <- max(driverLapsNormWhiskers[, max]) #+ (30 * 1000) # add 30 seconds
maxTime <- 3*60*1000 #3 minutes
minMax <- c(minTime - (minTime * 0.01), maxTime * 1.05)
return(minMax)
}
driverLapTimesToolTip <- function(pp){
for (i in 1:length(pp[["x"]][["data"]])){
if (length(pp[["x"]][["data"]][[i]][["text"]]) > 0){
#extract and format lap times
dataList <- pp[["x"]][["data"]][[i]][["text"]]
driverName <- stringr::str_extract(dataList, "factor\\(surname\\): [^<]*")
driverName <- gsub("factor(surname):", "", driverName, fixed = TRUE)
driverName <- gsub(" ", "", driverName)
lapNumber <- stringr::str_extract(dataList, "lap: [^<]*")
lapNumber <- gsub("lap:", "", lapNumber)
lapNumber <- gsub(" ", "", lapNumber)
laptimes <- stringr::str_extract(dataList, "[0-9]{1,4}\\.[0-9]{1,4}")
laptimes <- lubridate::as.period(lubridate::as.duration(as.numeric(laptimes)))
laptimes <- gsub("M ", ":", laptimes, fixed = TRUE)
laptimes <- gsub("S", "", laptimes, fixed = TRUE)
laptimes <- gsub("(:)([0-9]{1})(\\.)", "\\10\\2\\3", laptimes)
laptimes <- substring(laptimes, 1, 8)
# append 0's after decimal point so it always displays with at least 3 decimal places
for (j in 1:length(laptimes)){
if (!is.na(laptimes[j])){
decimalPlaces <- stringr::str_extract(laptimes[j], "\\..*")
if (is.na(decimalPlaces)){
laptimes[j] <- paste(laptimes[j], "000", sep = "")
} else if (nchar(decimalPlaces) == 3){
laptimes[j] <- paste(laptimes[j], "0", sep = "")
} else if (nchar(decimalPlaces) == 2){
laptimes[j] <- paste(laptimes[j], "00", sep = "")
} else if (nchar(decimalPlaces) == 1){
laptimes[j] <- paste(laptimes[j], "000", sep = "")
}
}
}
mungedList <- paste("<b>Driver:</b> ", driverName,
"<br /><b>Lap:</b> ", lapNumber,
"<br /><b>Lap Time:</b> ", laptimes,
sep = "")
# driver name label
pp[["x"]][["data"]][[i]][["text"]] <- mungedList
}
}
return(pp)
}
getTrackImage <- function(circuit_Id, transparencyVal){
# have a default image to return in case one is not found
returnImage <- watermark
if (circuit_Id %in% circuits[!is.na(imageSource), circuitId]){
img <- readPNG(source = circuits[circuitId == circuit_Id, imageSource])
img2 <- matrix(rgb(img[,,1],img[,,2],img[,,3], img[,,4] * transparencyVal), nrow=dim(img)[1])
returnImage <- rasterGrob(img2, interpolate = TRUE)
}
return(returnImage)
}
convertLapTimeStringToSeconds <- function(lapTimeString){
minutes <- as.numeric(stringr::str_extract(lapTimeString, "^[0-9]{1,2}"))
seconds <- stringr::str_extract(lapTimeString, ":[0-9]{1,2}\\.[0-9]{1,3}")
seconds <- as.double(gsub(":", "", seconds, fixed = TRUE))
totalSeconds <- (minutes * 60) + seconds
return(totalSeconds)
}
convertSecondsToDisplayTime <- function(secondsToConvert){
totalMinutes <- floor(secondsToConvert / 60)
remainingSeconds <- secondsToConvert - (totalMinutes * 60)
if (remainingSeconds < 10){
displayTime <- paste(totalMinutes, ":0", sprintf("%.3f", round(remainingSeconds,3)), sep = "")
} else {
displayTime <- paste(totalMinutes, ":", sprintf("%.3f", round(remainingSeconds,3)), sep = "")
}
return(displayTime)
}
loadF1Data <- function(){
circuits <<- fread("data/circuits.csv")
names(circuits) <<- c("circuitId","circuitRef","name","location","country","lat","lng","alt","url")
drivers <<- fread("data/driver.csv")
names(drivers) <<- c("driverId","driverRef","number","code","forename","surname","dob","nationality","url")
lapTimes <<- fread("data/lap_times.csv")
names(lapTimes) <<- c("raceId","driverId","lap","position","time","milliseconds")
races <<- fread("data/races.csv")
names(races) <<- c("raceId","year","round","circuitId","name","date","url")
results <<- fread("data/results.csv")
names(results) <<- c("resultId","raceId","driverId","constructorId","number","grid","position","positionText","positionOrder","points","laps","time","milliseconds","fastestLap","rank","fastestLapTime","fastestLapSpeed","statusId")
### milliseconds displayed as seconds makes lubridate functions easier
lapTimes[, seconds := milliseconds / 1000]
### create new table for fastest laps, because some of these are missing from core data
### note: this throws warning: "In eval(jsub, SDenv, parent.frame()) : NAs introduced by coercion"
### but it's fine, it's just a warning, intended behavior here.
racesWithTimes <- unique(lapTimes[, raceId])
raceSpeeds <- results[raceId %in% racesWithTimes][, fastestLapSpeed := as.numeric(fastestLapSpeed)]
raceSpeeds <- raceSpeeds[!is.na(fastestLapSpeed), .(highestSpeed = max(fastestLapSpeed)), by = raceId]
fastestLaps <<- lapTimes[, .(milliseconds = min(milliseconds)), by = raceId]
fastestLaps[, seconds := milliseconds / 1000]
for (i in 1:nrow(fastestLaps)) {
fastestLaps[i, displayTime := convertSecondsToDisplayTime(seconds)]
}
fastestLaps[, fastestLapSpeed := as.numeric()]
for (i in raceSpeeds[, raceId]) {
speedVal <- raceSpeeds[raceId == i, highestSpeed]
fastestLaps[raceId == i, fastestLapSpeed := speedVal]
}
fastestLaps[, fastestLapSpeed := sprintf("%.3f", round(fastestLapSpeed,3))]
fastestLaps[is.na(fastestLapSpeed), fastestLapSpeed := "No Data"]
### fix circuit names
circuits[circuitId == 18, name := "Autódromo José Carlos Pace"]
circuits[circuitId == 20, name := "Nürburgring"]
### attach circuit image source
if (!"imageSource" %in% names(circuits)){
circuits[, imageSource := character()]
}
circuits[circuitId == 1, imageSource := "images/Albert_Park.png"]
circuits[circuitId == 2, imageSource := "images/Sepang.png"]
circuits[circuitId == 3, imageSource := "images/Sakhir1.png"]
circuits[circuitId == 4, imageSource := "images/CircuitDeCatalunya.png"]
circuits[circuitId == 6, imageSource := "images/Monte_Carlo_Formula_1_track_map.png"]
circuits[circuitId == 7, imageSource := "images/CircuitGillesVilleneuve.png"]
circuits[circuitId == 8, imageSource := "images/Magny-Cours.png"]
circuits[circuitId == 9, imageSource := "images/SilverstoneArena2010.png"]
circuits[circuitId == 10, imageSource := "images/Hockenheimring2002.png"]
circuits[circuitId == 11, imageSource := "images/Hungaroring.png"]
circuits[circuitId == 13, imageSource := "images/Track_map_of_Spa-Francorchamps_in_Belgium.png"]
circuits[circuitId == 14, imageSource := "Monza2000.png"]
circuits[circuitId == 15, imageSource := "images/Singapore_street_circuit_v4.png"]
circuits[circuitId == 17, imageSource := "images/ShanghaiCircuit1.png"]
circuits[circuitId == 18, imageSource := "images/Interlagos1990.png"]
circuits[circuitId == 20, imageSource := "images/Nurburgring2002.png"]
circuits[circuitId == 21, imageSource := "Imola1995.png"]
circuits[circuitId == 22, imageSource := "SuzukaCircuit2005.png"]
circuits[circuitId == 24, imageSource := "Circuit_Yas-Island.png"]
}
loadF1Data()
mostRacesCircuitId <- 18 # set the circuit ID to evaluate here!!!
# only pull races that have lapTimes data
racesWithTimes <- unique(lapTimes[, raceId])
racesForCircuit <- races[circuitId == mostRacesCircuitId][raceId %in% racesWithTimes][order(year)]
# pull all lap times for races, and create a "seconds" column for the lap time
allCircuitLapTimes <- lapTimes[raceId %in% racesForCircuit[, raceId]]
# limit lap times to those under 3 minutes, removes pit stop laps and exceedingly slow laps that might throw off intended resutls
anaimateLapTimesData <- allCircuitLapTimes[seconds <= 180]
anaimateLapTimesData <- merge(anaimateLapTimesData, races[, .(raceId, name, year)])
# retrieve race results for all races on circuit
racesResults <- unique(races[raceId %in% unique(anaimateLapTimesData[, raceId]), .(raceId, year)])
racesResults <- merge(racesResults, fastestLaps, by = "raceId")
racesResults <- merge(racesResults, anaimateLapTimesData[, .(medianLapTime = median(seconds)), by = raceId], by = "raceId")
racesResults[, raceToolTip := paste("<span style='font-size:16; color:black'>",
"**Fastest Lap:** ", displayTime,
"<br>**Fastest Lap Speed:** ", as.character(fastestLapSpeed),
"</span>",
sep = "")]
# boxplot stats for static reference lines
circuitBoxPlotStats <- boxplot.stats(anaimateLapTimesData[, seconds])
vlines <- data.table(metric = c("Q1", "Q2", "Median", "Q3", "Q4"),
value = circuitBoxPlotStats$stats[1:5],
metricColor = c("darkgreen", "blue", "brown2", "blue", "darkgreen"))
grandPrixName <- anaimateLapTimesData[1, name]
circuitImg <- getTrackImage(mostRacesCircuitId, 0.2)
rm(circuitBoxPlotStats, mostRacesCircuitId, racesForCircuit, racesWithTimes)
### define plot size
xMin <- 45
xMax <- 180
yMin <- 0
yMax <- 0.35
# density large plot
denAnim <- ggplot(anaimateLapTimesData, aes(x = seconds)) +
geom_density(data = allCircuitLapTimes[seconds <= 180], adjust = 4,
aes(x = seconds, color = "green", fill = "green", alpha = 0.5)) +
geom_density(aes(color = "purple", fill = "purple", alpha = 0.5),
adjust = 4) +
geom_vline(data = vlines, aes(xintercept = value, color = metricColor), linetype = "dashed") +
geom_text(data = vlines, aes(x = value + 0.5, y = 0.3, label = metric, color = metricColor),
angle = 270) +
xlim(xMin,xMax) +
ylim(yMin,yMax) +
labs(title = paste(grandPrixName, "{frame_time}"),
subtitle = "Lap Times Density Over Years") +
xlab("Lap Time (seconds)") +
ylab("Density") +
theme_wsj() +
# legend formatting
scale_fill_identity(name = "", guide = "legend",
labels = c(paste("All", grandPrixName), paste("This", grandPrixName))) +
scale_alpha_identity(element_blank()) +
scale_colour_identity(element_blank()) +
theme(legend.position = c(0.75,0.95), legend.direction = "horizontal",
axis.title=element_text(size=12)) +
# watermark, track image, and fastest lap/speed
annotation_custom(circuitImg, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
annotate(geom = "text", x = 165, y = 0.015, size = 5, label = "github.com/timeddilation") +
geom_rich_text(data = racesResults[, .(year, raceToolTip)], aes(x = 150, y = 0.3, label = raceToolTip),
fill = NA, label.color = NA, hjust = 0) +
# gganimmate stuff
transition_time(year) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
animate(denAnim, width = 960, height = 540)
animate(denAnim, width = 960, height = 440)
