paste("This",racesForCircuit[raceId == raceEvaluating, name]))) +
scale_alpha_identity(element_blank()) +
scale_colour_identity(element_blank()) +
theme(legend.position = c(0.75,0.95), legend.direction = "horizontal",
axis.title=element_text(size=12)) +
annotation_custom(img2, xmin = 1, xmax = 10, ymin = 1, ymax = 10)
gg
ggplot(raceDriverLaps[seconds <= 180],
aes(x = seconds)) +
geom_density(data = allCircuitLapTimes[seconds <= 180], aes(x = seconds, color = "green", fill = "green", alpha = 0.5),
adjust = 4,
) +
geom_density(aes(color = "purple", fill = "purple", alpha = 0.5),
adjust = 4) +
geom_vline(data = vlines, aes(xintercept = V1, color = "red"), linetype = "dashed") +
xlim(45,180) +
ylim(0,0.35) +
labs(title = paste(racesForCircuit[raceId == raceEvaluating, name],
racesForCircuit[raceId == raceEvaluating, year])) +
xlab("Lap Time (seconds)") +
ylab("Density") +
theme_wsj() +
scale_fill_identity(name = "", guide = "legend",
labels = c(paste("All",racesForCircuit[raceId == raceEvaluating, name]),
paste("This",racesForCircuit[raceId == raceEvaluating, name]))) +
scale_alpha_identity(element_blank()) +
scale_colour_identity(element_blank()) +
theme(legend.position = c(0.75,0.95), legend.direction = "horizontal",
axis.title=element_text(size=12)) +
annotation_custom(img2, xmin = 1, xmax = 10, ymin = 1, ymax = 10)
ggplot(raceDriverLaps[seconds <= 180],
aes(x = seconds)) +
geom_density(data = allCircuitLapTimes[seconds <= 180], aes(x = seconds, color = "green", fill = "green", alpha = 0.5),
adjust = 4,
) +
geom_density(aes(color = "purple", fill = "purple", alpha = 0.5),
adjust = 4) +
geom_vline(data = vlines, aes(xintercept = V1, color = "red"), linetype = "dashed") +
xlim(45,180) +
ylim(0,0.35) +
labs(title = paste(racesForCircuit[raceId == raceEvaluating, name],
racesForCircuit[raceId == raceEvaluating, year])) +
xlab("Lap Time (seconds)") +
ylab("Density") +
theme_wsj() +
scale_fill_identity(name = "", guide = "legend",
labels = c(paste("All",racesForCircuit[raceId == raceEvaluating, name]),
paste("This",racesForCircuit[raceId == raceEvaluating, name]))) +
scale_alpha_identity(element_blank()) +
scale_colour_identity(element_blank()) +
theme(legend.position = c(0.75,0.95), legend.direction = "horizontal",
axis.title=element_text(size=12)) +
annotation_custom(img2, xmin = 1, xmax = 100, ymin = 1, ymax = 100)
ggplot(raceDriverLaps[seconds <= 180],
aes(x = seconds)) +
geom_density(data = allCircuitLapTimes[seconds <= 180], aes(x = seconds, color = "green", fill = "green", alpha = 0.5),
adjust = 4,
) +
geom_density(aes(color = "purple", fill = "purple", alpha = 0.5),
adjust = 4) +
geom_vline(data = vlines, aes(xintercept = V1, color = "red"), linetype = "dashed") +
xlim(45,180) +
ylim(0,0.35) +
labs(title = paste(racesForCircuit[raceId == raceEvaluating, name],
racesForCircuit[raceId == raceEvaluating, year])) +
xlab("Lap Time (seconds)") +
ylab("Density") +
theme_wsj() +
scale_fill_identity(name = "", guide = "legend",
labels = c(paste("All",racesForCircuit[raceId == raceEvaluating, name]),
paste("This",racesForCircuit[raceId == raceEvaluating, name]))) +
scale_alpha_identity(element_blank()) +
scale_colour_identity(element_blank()) +
theme(legend.position = c(0.75,0.95), legend.direction = "horizontal",
axis.title=element_text(size=12)) +
annotation_custom(img2, xmin = 0, xmax = 100, ymin = 0, ymax = 100)
img <- readPNG(source = "images/brazilSmall.png")
img <- readPNG(source = "images/brazil_small.png")
img2 <- rasterGrob(img, interpolate = TRUE)
#raceDriverLaps <-
# single track speed density over years
gg <- ggplot(raceDriverLaps[seconds <= 180],
aes(x = seconds)) +
geom_density(data = allCircuitLapTimes[seconds <= 180], aes(x = seconds, color = "green", fill = "green", alpha = 0.5),
adjust = 4,
) +
geom_density(aes(color = "purple", fill = "purple", alpha = 0.5),
adjust = 4) +
geom_vline(data = vlines, aes(xintercept = V1, color = "red"), linetype = "dashed") +
xlim(45,180) +
ylim(0,0.35) +
labs(title = paste(racesForCircuit[raceId == raceEvaluating, name],
racesForCircuit[raceId == raceEvaluating, year])) +
xlab("Lap Time (seconds)") +
ylab("Density") +
theme_wsj() +
scale_fill_identity(name = "", guide = "legend",
labels = c(paste("All",racesForCircuit[raceId == raceEvaluating, name]),
paste("This",racesForCircuit[raceId == raceEvaluating, name]))) +
scale_alpha_identity(element_blank()) +
scale_colour_identity(element_blank()) +
theme(legend.position = c(0.75,0.95), legend.direction = "horizontal",
axis.title=element_text(size=12)) +
annotation_custom(img2, xmin = 0, xmax = 100, ymin = 0, ymax = 100)
gg
ggplot(raceDriverLaps[seconds <= 180],
aes(x = seconds)) +
geom_density(data = allCircuitLapTimes[seconds <= 180], aes(x = seconds, color = "green", fill = "green", alpha = 0.5),
adjust = 4,
) +
geom_density(aes(color = "purple", fill = "purple", alpha = 0.5),
adjust = 4) +
geom_vline(data = vlines, aes(xintercept = V1, color = "red"), linetype = "dashed") +
xlim(45,180) +
ylim(0,0.35) +
labs(title = paste(racesForCircuit[raceId == raceEvaluating, name],
racesForCircuit[raceId == raceEvaluating, year])) +
xlab("Lap Time (seconds)") +
ylab("Density") +
theme_wsj() +
scale_fill_identity(name = "", guide = "legend",
labels = c(paste("All",racesForCircuit[raceId == raceEvaluating, name]),
paste("This",racesForCircuit[raceId == raceEvaluating, name]))) +
scale_alpha_identity(element_blank()) +
scale_colour_identity(element_blank()) +
theme(legend.position = c(0.75,0.95), legend.direction = "horizontal",
axis.title=element_text(size=12)) +
annotation_custom(img2, xmin = 1, xmax = 10, ymin = 8, ymax = 10)
ggplot(raceDriverLaps[seconds <= 180],
aes(x = seconds)) +
geom_density(data = allCircuitLapTimes[seconds <= 180], aes(x = seconds, color = "green", fill = "green", alpha = 0.5),
adjust = 4,
) +
geom_density(aes(color = "purple", fill = "purple", alpha = 0.5),
adjust = 4) +
geom_vline(data = vlines, aes(xintercept = V1, color = "red"), linetype = "dashed") +
xlim(45,180) +
ylim(0,0.35) +
labs(title = paste(racesForCircuit[raceId == raceEvaluating, name],
racesForCircuit[raceId == raceEvaluating, year])) +
xlab("Lap Time (seconds)") +
ylab("Density") +
theme_wsj() +
scale_fill_identity(name = "", guide = "legend",
labels = c(paste("All",racesForCircuit[raceId == raceEvaluating, name]),
paste("This",racesForCircuit[raceId == raceEvaluating, name]))) +
scale_alpha_identity(element_blank()) +
scale_colour_identity(element_blank()) +
theme(legend.position = c(0.75,0.95), legend.direction = "horizontal",
axis.title=element_text(size=12)) +
annotation_custom(img2, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf)
ggplot(raceDriverLaps[seconds <= 180],
aes(x = seconds)) +
geom_density(data = allCircuitLapTimes[seconds <= 180], aes(x = seconds, color = "green", fill = "green", alpha = 0.5),
adjust = 4,
) +
geom_density(aes(color = "purple", fill = "purple", alpha = 0.5),
adjust = 4) +
geom_vline(data = vlines, aes(xintercept = V1, color = "red"), linetype = "dashed") +
xlim(45,180) +
ylim(0,0.35) +
labs(title = paste(racesForCircuit[raceId == raceEvaluating, name],
racesForCircuit[raceId == raceEvaluating, year])) +
xlab("Lap Time (seconds)") +
ylab("Density") +
theme_wsj() +
scale_fill_identity(name = "", guide = "legend",
labels = c(paste("All",racesForCircuit[raceId == raceEvaluating, name]),
paste("This",racesForCircuit[raceId == raceEvaluating, name]))) +
scale_alpha_identity(element_blank()) +
scale_colour_identity(element_blank()) +
theme(legend.position = c(0.75,0.95), legend.direction = "horizontal",
axis.title=element_text(size=12)) +
annotation_custom(img2, xmin = -Inf, xmax = Inf, ymin = 60, ymax = 180)
ggplot(raceDriverLaps[seconds <= 180],
aes(x = seconds)) +
geom_density(data = allCircuitLapTimes[seconds <= 180], aes(x = seconds, color = "green", fill = "green", alpha = 0.5),
adjust = 4,
) +
geom_density(aes(color = "purple", fill = "purple", alpha = 0.5),
adjust = 4) +
geom_vline(data = vlines, aes(xintercept = V1, color = "red"), linetype = "dashed") +
xlim(45,180) +
ylim(0,0.35) +
labs(title = paste(racesForCircuit[raceId == raceEvaluating, name],
racesForCircuit[raceId == raceEvaluating, year])) +
xlab("Lap Time (seconds)") +
ylab("Density") +
theme_wsj() +
scale_fill_identity(name = "", guide = "legend",
labels = c(paste("All",racesForCircuit[raceId == raceEvaluating, name]),
paste("This",racesForCircuit[raceId == raceEvaluating, name]))) +
scale_alpha_identity(element_blank()) +
scale_colour_identity(element_blank()) +
theme(legend.position = c(0.75,0.95), legend.direction = "horizontal",
axis.title=element_text(size=12)) +
annotation_custom(img2, xmin = -Inf, xmax = Inf, ymin = 60, ymax = 160)
ggplot(raceDriverLaps[seconds <= 180],
aes(x = seconds)) +
geom_density(data = allCircuitLapTimes[seconds <= 180], aes(x = seconds, color = "green", fill = "green", alpha = 0.5),
adjust = 4,
) +
geom_density(aes(color = "purple", fill = "purple", alpha = 0.5),
adjust = 4) +
geom_vline(data = vlines, aes(xintercept = V1, color = "red"), linetype = "dashed") +
xlim(45,180) +
ylim(0,0.35) +
labs(title = paste(racesForCircuit[raceId == raceEvaluating, name],
racesForCircuit[raceId == raceEvaluating, year])) +
xlab("Lap Time (seconds)") +
ylab("Density") +
theme_wsj() +
scale_fill_identity(name = "", guide = "legend",
labels = c(paste("All",racesForCircuit[raceId == raceEvaluating, name]),
paste("This",racesForCircuit[raceId == raceEvaluating, name]))) +
scale_alpha_identity(element_blank()) +
scale_colour_identity(element_blank()) +
theme(legend.position = c(0.75,0.95), legend.direction = "horizontal",
axis.title=element_text(size=12)) +
annotation_custom(img2, xmin = 0.1, xmax = 0.3, ymin = 60, ymax = 160)
?annotation_custom
ggplot(raceDriverLaps[seconds <= 180],
aes(x = seconds)) +
geom_density(data = allCircuitLapTimes[seconds <= 180], aes(x = seconds, color = "green", fill = "green", alpha = 0.5),
adjust = 4,
) +
geom_density(aes(color = "purple", fill = "purple", alpha = 0.5),
adjust = 4) +
geom_vline(data = vlines, aes(xintercept = V1, color = "red"), linetype = "dashed") +
xlim(45,180) +
ylim(0,0.35) +
labs(title = paste(racesForCircuit[raceId == raceEvaluating, name],
racesForCircuit[raceId == raceEvaluating, year])) +
xlab("Lap Time (seconds)") +
ylab("Density") +
theme_wsj() +
scale_fill_identity(name = "", guide = "legend",
labels = c(paste("All",racesForCircuit[raceId == raceEvaluating, name]),
paste("This",racesForCircuit[raceId == raceEvaluating, name]))) +
scale_alpha_identity(element_blank()) +
scale_colour_identity(element_blank()) +
theme(legend.position = c(0.75,0.95), legend.direction = "horizontal",
axis.title=element_text(size=12)) +
annotation_custom(img2, xmin = 60, xmax = 160, ymin = -Inf, ymax = Inf)
ggplot(raceDriverLaps[seconds <= 180],
aes(x = seconds)) +
geom_density(data = allCircuitLapTimes[seconds <= 180], aes(x = seconds, color = "green", fill = "green", alpha = 0.5),
adjust = 4,
) +
geom_density(aes(color = "purple", fill = "purple", alpha = 0.5),
adjust = 4) +
geom_vline(data = vlines, aes(xintercept = V1, color = "red"), linetype = "dashed") +
xlim(45,180) +
ylim(0,0.35) +
labs(title = paste(racesForCircuit[raceId == raceEvaluating, name],
racesForCircuit[raceId == raceEvaluating, year])) +
xlab("Lap Time (seconds)") +
ylab("Density") +
theme_wsj() +
scale_fill_identity(name = "", guide = "legend",
labels = c(paste("All",racesForCircuit[raceId == raceEvaluating, name]),
paste("This",racesForCircuit[raceId == raceEvaluating, name]))) +
scale_alpha_identity(element_blank()) +
scale_colour_identity(element_blank()) +
theme(legend.position = c(0.75,0.95), legend.direction = "horizontal",
axis.title=element_text(size=12)) +
annotation_custom(img2, xmin = 160, xmax = 180, ymin = 0.2, ymax = 0.3)
library(data.table)
library(ggplot2)
library(ggthemes)
library(gganimate)
library(plotly)
library(lubridate)
library(dplyr)
library(png)
library(grid)
setwd("F:/AppFiles/R/F1")
circuits <- fread("circuits.csv")
drivers <- fread("drivers.csv")
lapTimes <- fread("lapTimes.csv")
races <- fread("races.csv")
results <- fread("results.csv")
generateRaceDriverLaps <- function(raceIdEval) {
raceLaps <- merge(lapTimes[raceId == raceIdEval], drivers[, .(driverId, surname)])
raceLaps[, seconds := milliseconds / 1000]
raceLaps[, totalRaceTime := cumsum(milliseconds), by = driverId]
return(raceLaps)
}
raceLapsBoxPlotsMinMax <- function(race_Id) {
# returns min and max laps times across all laps' boxplot.stats[1,5]
driverLapsNormWhiskers <- lapTimes[raceId == race_Id, .(min = boxplot.stats(milliseconds)$stats[1],
max = boxplot.stats(milliseconds)$stats[5]),
by = lap]
minTime <- min(driverLapsNormWhiskers[, min])
#maxTime <- max(driverLapsNormWhiskers[, max]) #+ (30 * 1000) # add 30 seconds
maxTime <- 3*60*1000 #3 minutes
minMax <- c(minTime - (minTime * 0.01), maxTime * 1.05)
return(minMax)
}
driverLapTimesToolTip <- function(pp){
for (i in 1:length(pp[["x"]][["data"]])){
if (length(pp[["x"]][["data"]][[i]][["text"]]) > 0){
#extract and format lap times
dataList <- pp[["x"]][["data"]][[i]][["text"]]
driverName <- stringr::str_extract(dataList, "factor\\(surname\\): [^<]*")
driverName <- gsub("factor(surname):", "", driverName, fixed = TRUE)
driverName <- gsub(" ", "", driverName)
lapNumber <- stringr::str_extract(dataList, "lap: [^<]*")
lapNumber <- gsub("lap:", "", lapNumber)
lapNumber <- gsub(" ", "", lapNumber)
laptimes <- stringr::str_extract(dataList, "[0-9]{1,4}\\.[0-9]{1,4}")
laptimes <- lubridate::as.period(lubridate::as.duration(as.numeric(laptimes)))
laptimes <- gsub("M ", ":", laptimes, fixed = TRUE)
laptimes <- gsub("S", "", laptimes, fixed = TRUE)
laptimes <- gsub("(:)([0-9]{1})(\\.)", "\\10\\2\\3", laptimes)
laptimes <- substring(laptimes, 1, 8)
# append 0's after decimal point so it always displays with at least 3 decimal places
for (j in 1:length(laptimes)){
if (!is.na(laptimes[j])){
decimalPlaces <- stringr::str_extract(laptimes[j], "\\..*")
if (is.na(decimalPlaces)){
laptimes[j] <- paste(laptimes[j], "000", sep = "")
} else if (nchar(decimalPlaces) == 3){
laptimes[j] <- paste(laptimes[j], "0", sep = "")
} else if (nchar(decimalPlaces) == 2){
laptimes[j] <- paste(laptimes[j], "00", sep = "")
} else if (nchar(decimalPlaces) == 1){
laptimes[j] <- paste(laptimes[j], "000", sep = "")
}
}
}
mungedList <- paste("<b>Driver:</b> ", driverName,
"<br /><b>Lap:</b> ", lapNumber,
"<br /><b>Lap Time:</b> ", laptimes,
sep = "")
# driver name label
pp[["x"]][["data"]][[i]][["text"]] <- mungedList
}
}
return(pp)
}
raceCounts <- races[raceId %in% unique(lapTimes[, raceId]), .(races = .N), by = circuitId][order(races)]
mostRacesCircuitId <- as.numeric(raceCounts[nrow(raceCounts), circuitId])
mostRacesCircuitId <- 18
racesWithTimes <- unique(lapTimes[, raceId])
racesForCircuit <- races[circuitId == mostRacesCircuitId][raceId %in% racesWithTimes][order(year)]
allCircuitLapTimes <- lapTimes[raceId %in% racesForCircuit[, raceId]]
allCircuitLapTimes[, seconds := milliseconds / 1000]
anaimateLapTimesData <- allCircuitLapTimes[seconds <= 180]
anaimateLapTimesData <- merge(anaimateLapTimesData, races[, .(raceId, name, year)])
circuitBoxPlotStats <- boxplot.stats(anaimateLapTimesData[, seconds])
vlines <- as.data.table(circuitBoxPlotStats$stats[1:5])
grandPrixName <- anaimateLapTimesData[1, name]
img <- readPNG(source = "images/brazil_small.png") # need to setup data for these images
img2 <- rasterGrob(img, interpolate = TRUE)
rm(circuitBoxPlotStats, mostRacesCircuitId, racesForCircuit,racesWithTimes, raceCounts, img)
ggani <- ggplot(anaimateLapTimesData, aes(x = seconds)) +
geom_density(data = allCircuitLapTimes[seconds <= 180], aes(x = seconds, color = "green", fill = "green", alpha = 0.5),
adjust = 4,
) +
geom_density(aes(color = "purple", fill = "purple", alpha = 0.5),
adjust = 4) +
geom_vline(data = vlines, aes(xintercept = V1, color = "red"), linetype = "dashed") +
xlim(45,180) +
ylim(0,0.35) +
labs(title = paste(grandPrixName, "{frame_time}")) +
xlab("Lap Time (seconds)") +
ylab("Density") +
theme_wsj() +
scale_fill_identity(name = "", guide = "legend",
labels = c(paste("All", grandPrixName), paste("This", grandPrixName))) +
scale_alpha_identity(element_blank()) +
scale_colour_identity(element_blank()) +
theme(legend.position = c(0.75,0.95), legend.direction = "horizontal",
axis.title=element_text(size=12)) +
annotation_custom(img2, xmin = 160, xmax = 180, ymin = 0.2, ymax = 0.3) +
transition_time(year) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
# animate(plot = ggani, nframes = 110, end_pause = 10, ref_frame = 1, fps = 10, duration = 10, detail = 1,
#         options(gganimate.dev_args = list(width = 960, height = 540)))
gps <- length(unique(anaimateLapTimesData[, raceId]))
framesPerGp <- 16
totalFrames <- (gps * framesPerGp) + 15
rm(gps, framesPerGp, allCircuitLapTimes, anaimateLapTimesData, vlines, grandPrixName)
animate(ggani, start_pause = 5, end_pause = 10, nframes = totalFrames, detail = 4)
rm(totalFrames, ggani)
raceCounts <- races[raceId %in% unique(lapTimes[, raceId]), .(races = .N), by = circuitId][order(races)]
mostRacesCircuitId <- as.numeric(raceCounts[nrow(raceCounts), circuitId])
rm(raceCounts)
mostRacesCircuitId <- 18
racesWithTimes <- unique(lapTimes[, raceId])
racesForCircuit <- races[circuitId == mostRacesCircuitId][raceId %in% racesWithTimes][order(year)]
racesForCircuit
allCircuitLapTimes <- lapTimes[raceId %in% racesForCircuit[, raceId]]
allCircuitLapTimes[, seconds := milliseconds / 1000]
circuitBoxPlotStats <- boxplot.stats(allCircuitLapTimes[seconds <= 180, seconds])
# median <- circuitBoxPlotStats$stats[3]
vlines <- as.data.table(circuitBoxPlotStats$stats[1:5])
### in loop ###
i <- 1
raceEvaluating <- as.numeric(racesForCircuit[i, raceId])
raceDriverLaps <- generateRaceDriverLaps(raceEvaluating)
img <- readPNG(source = "images/brazil.png")
img2 <- rasterGrob(img, interpolate = TRUE)
#raceDriverLaps <-
# single track speed density over years
gg <- ggplot(raceDriverLaps[seconds <= 180],
aes(x = seconds)) +
geom_density(data = allCircuitLapTimes[seconds <= 180], aes(x = seconds, color = "green", fill = "green", alpha = 0.5),
adjust = 4,
) +
geom_density(aes(color = "purple", fill = "purple", alpha = 0.5),
adjust = 4) +
geom_vline(data = vlines, aes(xintercept = V1, color = "red"), linetype = "dashed") +
xlim(45,180) +
ylim(0,0.35) +
labs(title = paste(racesForCircuit[raceId == raceEvaluating, name],
racesForCircuit[raceId == raceEvaluating, year])) +
xlab("Lap Time (seconds)") +
ylab("Density") +
theme_wsj() +
scale_fill_identity(name = "", guide = "legend",
labels = c(paste("All",racesForCircuit[raceId == raceEvaluating, name]),
paste("This",racesForCircuit[raceId == raceEvaluating, name]))) +
scale_alpha_identity(element_blank()) +
scale_colour_identity(element_blank()) +
theme(legend.position = c(0.75,0.95), legend.direction = "horizontal",
axis.title=element_text(size=12)) +
annotation_custom(img2, xmin = 160, xmax = 180, ymin = 0.2, ymax = 0.3)
gg
library(data.table)
library(ggplot2)
library(ggthemes)
library(gganimate)
library(plotly)
library(lubridate)
library(dplyr)
library(png)
library(grid)
setwd("F:/AppFiles/R/F1")
circuits <- fread("data/circuits.csv")
drivers <- fread("data/drivers.csv")
lapTimes <- fread("data/lapTimes.csv")
races <- fread("data/races.csv")
results <- fread("data/results.csv")
generateRaceDriverLaps <- function(raceIdEval) {
raceLaps <- merge(lapTimes[raceId == raceIdEval], drivers[, .(driverId, surname)])
raceLaps[, seconds := milliseconds / 1000]
raceLaps[, totalRaceTime := cumsum(milliseconds), by = driverId]
return(raceLaps)
}
raceLapsBoxPlotsMinMax <- function(race_Id) {
# returns min and max laps times across all laps' boxplot.stats[1,5]
driverLapsNormWhiskers <- lapTimes[raceId == race_Id, .(min = boxplot.stats(milliseconds)$stats[1],
max = boxplot.stats(milliseconds)$stats[5]),
by = lap]
minTime <- min(driverLapsNormWhiskers[, min])
#maxTime <- max(driverLapsNormWhiskers[, max]) #+ (30 * 1000) # add 30 seconds
maxTime <- 3*60*1000 #3 minutes
minMax <- c(minTime - (minTime * 0.01), maxTime * 1.05)
return(minMax)
}
driverLapTimesToolTip <- function(pp){
for (i in 1:length(pp[["x"]][["data"]])){
if (length(pp[["x"]][["data"]][[i]][["text"]]) > 0){
#extract and format lap times
dataList <- pp[["x"]][["data"]][[i]][["text"]]
driverName <- stringr::str_extract(dataList, "factor\\(surname\\): [^<]*")
driverName <- gsub("factor(surname):", "", driverName, fixed = TRUE)
driverName <- gsub(" ", "", driverName)
lapNumber <- stringr::str_extract(dataList, "lap: [^<]*")
lapNumber <- gsub("lap:", "", lapNumber)
lapNumber <- gsub(" ", "", lapNumber)
laptimes <- stringr::str_extract(dataList, "[0-9]{1,4}\\.[0-9]{1,4}")
laptimes <- lubridate::as.period(lubridate::as.duration(as.numeric(laptimes)))
laptimes <- gsub("M ", ":", laptimes, fixed = TRUE)
laptimes <- gsub("S", "", laptimes, fixed = TRUE)
laptimes <- gsub("(:)([0-9]{1})(\\.)", "\\10\\2\\3", laptimes)
laptimes <- substring(laptimes, 1, 8)
# append 0's after decimal point so it always displays with at least 3 decimal places
for (j in 1:length(laptimes)){
if (!is.na(laptimes[j])){
decimalPlaces <- stringr::str_extract(laptimes[j], "\\..*")
if (is.na(decimalPlaces)){
laptimes[j] <- paste(laptimes[j], "000", sep = "")
} else if (nchar(decimalPlaces) == 3){
laptimes[j] <- paste(laptimes[j], "0", sep = "")
} else if (nchar(decimalPlaces) == 2){
laptimes[j] <- paste(laptimes[j], "00", sep = "")
} else if (nchar(decimalPlaces) == 1){
laptimes[j] <- paste(laptimes[j], "000", sep = "")
}
}
}
mungedList <- paste("<b>Driver:</b> ", driverName,
"<br /><b>Lap:</b> ", lapNumber,
"<br /><b>Lap Time:</b> ", laptimes,
sep = "")
# driver name label
pp[["x"]][["data"]][[i]][["text"]] <- mungedList
}
}
return(pp)
}
#setwd("F:/AppFiles/R/F1")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
install.packages('rstudioapi')
#setwd("F:/AppFiles/R/F1")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
